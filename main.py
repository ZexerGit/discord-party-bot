import os
import discord
from discord.ext import commands
from flask import Flask
from threading import Thread

# =======================
# Flask keep-alive server
# =======================
app = Flask(__name__)

@app.route("/")
def home():
    return "Bot is running!"

def run():
    app.run(host="0.0.0.0", port=8080)

def keep_alive():
    Thread(target=run).start()


# =======================
# Discord Bot
# =======================
intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix="!", intents=intents)

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏≠‡∏ö / ‡∏ä‡πà‡∏≠‡∏á / ‡∏ö‡∏≠‡∏™
times = ["16.00", "18.00", "22.00"]
channels = ["CH-1", "CH-2"]
bosses = ["Sylph", "Undine", "Gnome", "Salamander"]

# ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ
parties = {t: {c: {b: [] for b in bosses} for c in channels} for t in times}
user_party = {}  # ‡πÄ‡∏Å‡πá‡∏ö user_id ‚Üí (time, channel, boss)


# =======================
# UI Components (Dropdown)
# =======================
class TimeSelect(discord.ui.Select):
    def __init__(self):
        options = [discord.SelectOption(label=t, description=f"‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤ {t}") for t in times]
        super().__init__(placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤", options=options)

    async def callback(self, interaction: discord.Interaction):
        time = self.values[0]
        await interaction.response.edit_message(
            content=f"‚è∞ ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤ {time}\n‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Channel ‡∏ï‡πà‡∏≠‡πÑ‡∏õ:",
            view=ChannelView(time)
        )

class ChannelSelect(discord.ui.Select):
    def __init__(self, time):
        self.time = time
        options = [discord.SelectOption(label=c) for c in channels]
        super().__init__(placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Channel", options=options)

    async def callback(self, interaction: discord.Interaction):
        ch = self.values[0]
        await interaction.response.edit_message(
            content=f"üõ°Ô∏è ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å {self.time} {ch}\n‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏≠‡∏™‡∏ï‡πà‡∏≠‡πÑ‡∏õ:",
            view=BossView(self.time, ch)
        )

class BossSelect(discord.ui.Select):
    def __init__(self, time, ch):
        self.time = time
        self.ch = ch
        options = [discord.SelectOption(label=b) for b in bosses]
        super().__init__(placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏≠‡∏™", options=options)

    async def callback(self, interaction: discord.Interaction):
        boss = self.values[0]
        uid = interaction.user.id
        uname = interaction.user.name

        if uid in user_party:
            await interaction.response.send_message(
                f"‚ö†Ô∏è {uname} ‡∏Ñ‡∏∏‡∏ì join ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ `!leave` ‡∏Å‡πà‡∏≠‡∏ô", ephemeral=True
            )
            return

        if len(parties[self.time][self.ch][boss]) >= 5:
            await interaction.response.send_message(
                f"‚ùå ‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ {self.time} {self.ch} {boss} ‡πÄ‡∏ï‡πá‡∏°‡πÅ‡∏•‡πâ‡∏ß", ephemeral=True
            )
            return

        parties[self.time][self.ch][boss].append(uid)
        user_party[uid] = (self.time, self.ch, boss)
        await interaction.response.send_message(
            f"‚úÖ {uname} ‡πÄ‡∏Ç‡πâ‡∏≤‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ {self.time} {self.ch} {boss}", ephemeral=False
        )

class TimeView(discord.ui.View):
    def __init__(self):
        super().__init__()
        self.add_item(TimeSelect())

class ChannelView(discord.ui.View):
    def __init__(self, time):
        super().__init__()
        self.add_item(ChannelSelect(time))

class BossView(discord.ui.View):
    def __init__(self, time, ch):
        super().__init__()
        self.add_item(BossSelect(time, ch))


# =======================
# Bot Commands
# =======================
@bot.event
async def on_ready():
    print(f"‚úÖ Bot Online as {bot.user}")

# interactive join
@bot.command()
async def join(ctx):
    await ctx.send("‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤:", view=TimeView())

# leave
@bot.command()
async def leave(ctx):
    uid = ctx.author.id
    uname = ctx.author.name
    if uid not in user_party:
        await ctx.send(f"‚ö†Ô∏è {uname} ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ")
        return
    time, ch, boss = user_party[uid]
    parties[time][ch][boss].remove(uid)
    del user_party[uid]
    await ctx.send(f"‚úÖ {uname} ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ {time} {ch} {boss}")

# list
@bot.command()
async def list(ctx, time: str, channel: str = None, boss: str = None):
    if time not in parties:
        await ctx.send(f"‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡πÄ‡∏ß‡∏•‡∏≤ `{time}`")
        return

    if channel and boss:
        if channel not in parties[time] or boss not in parties[time][channel]:
            await ctx.send(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ `{time} {channel} {boss}`")
            return
        members = parties[time][channel][boss]
        if not members:
            await ctx.send(f"üìã ‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ `{time} {channel} {boss}` ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ô")
        else:
            names = [bot.get_user(uid).name if bot.get_user(uid) else str(uid) for uid in members]
            await ctx.send(f"üìã ‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ `{time} {channel} {boss}` ({len(members)}/5): {', '.join(names)}")
        return

    # list ‡∏ó‡∏∏‡∏Å‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    msg = f"üìã ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÄ‡∏ß‡∏•‡∏≤ `{time}`:\n"
    for ch in parties[time]:
        for b in parties[time][ch]:
            members = parties[time][ch][b]
            if members:
                names = [bot.get_user(uid).name if bot.get_user(uid) else str(uid) for uid in members]
                msg += f"- {ch} {b} ({len(members)}/5): {', '.join(names)}\n"
            else:
                msg += f"- {ch} {b} (0/5): ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ô\n"
    await ctx.send(msg)

# clear
@bot.command()
async def clear(ctx):
    global parties, user_party
    parties = {t: {c: {b: [] for b in bosses} for c in channels} for t in times}
    user_party = {}
    await ctx.send("üßπ ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß")

# custom help
@bot.command(name="myhelp")
async def myhelp(ctx):
    help_text = (
        "**üìå ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ö‡∏≠‡∏ó‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ**\n\n"
        "**!join** ‚Üí ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ö‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤/Channel/‡∏ö‡∏≠‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏°‡∏ô‡∏π\n"
        "**!leave** ‚Üí ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏π‡πà\n"
        "**!list <‡πÄ‡∏ß‡∏•‡∏≤> <‡∏ä‡πà‡∏≠‡∏á> <‡∏ö‡∏≠‡∏™>** ‚Üí ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ö‡∏≠‡∏™\n"
        "**!list <‡πÄ‡∏ß‡∏•‡∏≤>** ‚Üí ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏±‡πâ‡∏ô\n"
        "**!clear** ‚Üí ‡∏•‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î\n"
        "**!myhelp** ‚Üí ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ô‡∏µ‡πâ\n\n"
        "**üïí ‡∏£‡∏≠‡∏ö:** 16.00 / 18.00 / 22.00\n"
        "**üè∞ ‡∏ä‡πà‡∏≠‡∏á:** CH-1 / CH-2\n"
        "**üëπ ‡∏ö‡∏≠‡∏™:** Sylph / Undine / Gnome / Salamander\n"
        "‡∏ï‡∏µ‡πâ‡∏•‡∏∞ 5 ‡∏Ñ‡∏ô / ‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß join ‡πÑ‡∏î‡πâ‡πÅ‡∏Ñ‡πà‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡∏ï‡πâ‡∏≠‡∏á `!leave` ‡∏Å‡πà‡∏≠‡∏ô join ‡πÉ‡∏´‡∏°‡πà"
    )
    await ctx.send(help_text)


# =======================
# Run bot
# =======================
keep_alive()
bot.run(os.environ["DISCORD_BOT_TOKEN"])
