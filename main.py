import os
import discord
from discord.ext import commands
from discord import app_commands

intents = discord.Intents.default()
intents.message_content = True
intents.members = True

bot = commands.Bot(command_prefix="!", intents=intents)

# ------------------------------
# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
ADMIN_PASSWORD = "osysadmin"
DEFAULT_JOIN_TIME = "12.00"

# ------------------------------
# ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ
parties = {t: {ch: {boss: [] for boss in ["Sylph", "Undine", "Gnome", "Salamander"]}
            for ch in ["CH-1", "CH-2"]} for t in ["16.00", "18.00", "22.00"]}

user_party = {}  # user_id -> (time, ch, boss, count)
join_time = DEFAULT_JOIN_TIME  # ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏° join

# ------------------------------
# UI Join View
class JoinView(discord.ui.View):
    def __init__(self, user):
        super().__init__(timeout=180)
        self.user = user
        self.selected_time = None
        self.selected_ch = None
        self.selected_boss = None
        self.selected_count = 1

        self.time_select = discord.ui.Select(
            placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤",
            options=[discord.SelectOption(label=t) for t in parties.keys()]
        )
        self.time_select.callback = self.time_callback
        self.add_item(self.time_select)

        self.ch_select = discord.ui.Select(
            placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Channel",
            options=[discord.SelectOption(label="CH-1"), discord.SelectOption(label="CH-2")]
        )
        self.ch_select.callback = self.ch_callback
        self.add_item(self.ch_select)

        self.boss_select = discord.ui.Select(
            placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Boss",
            options=[discord.SelectOption(label=boss) for boss in ["Sylph", "Undine", "Gnome", "Salamander"]]
        )
        self.boss_select.callback = self.boss_callback
        self.add_item(self.boss_select)

        self.count_select = discord.ui.Select(
            placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô (1‚Äì5)",
            options=[discord.SelectOption(label=str(i)) for i in range(1, 6)]
        )
        self.count_select.callback = self.count_callback
        self.add_item(self.count_select)

        self.confirm_button = discord.ui.Button(label="‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ", style=discord.ButtonStyle.green)
        self.confirm_button.callback = self.confirm_callback
        self.add_item(self.confirm_button)

        self.leave_button = discord.ui.Button(label="‚Ü©Ô∏è ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ", style=discord.ButtonStyle.red)
        self.leave_button.callback = self.leave_callback
        self.add_item(self.leave_button)

    async def interaction_check(self, interaction: discord.Interaction) -> bool:
        if interaction.user != self.user:
            await interaction.response.send_message("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏î UI ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÑ‡∏î‡πâ", ephemeral=True)
            return False
        return True

    async def time_callback(self, interaction: discord.Interaction):
        self.selected_time = self.time_select.values[0]
        await interaction.response.defer(ephemeral=True)

    async def ch_callback(self, interaction: discord.Interaction):
        self.selected_ch = self.ch_select.values[0]
        await interaction.response.defer(ephemeral=True)

    async def boss_callback(self, interaction: discord.Interaction):
        self.selected_boss = self.boss_select.values[0]
        await interaction.response.defer(ephemeral=True)

    async def count_callback(self, interaction: discord.Interaction):
        self.selected_count = int(self.count_select.values[0])
        await interaction.response.defer(ephemeral=True)

    async def confirm_callback(self, interaction: discord.Interaction):
        import datetime
        now_hour = datetime.datetime.now(datetime.timezone(datetime.timedelta(hours=7))).hour
        now_min = datetime.datetime.now(datetime.timezone(datetime.timedelta(hours=7))).minute
        current_time = f"{now_hour:02d}.{now_min:02d}"

        # Check join_time
        join_hour, join_min = map(int, join_time.split("."))
        if (now_hour, now_min) < (join_hour, join_min):
            await interaction.response.send_message(
                f"‚è≥ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤ join ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠ {join_time} ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô‡πÑ‡∏õ", ephemeral=True
            )
            return

        if not (self.selected_time and self.selected_ch and self.selected_boss and self.selected_count):
            await interaction.response.send_message("‚ö†Ô∏è ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏£‡∏ö ‡πÄ‡∏ß‡∏•‡∏≤/CH/Boss/‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô ‡∏Å‡πà‡∏≠‡∏ô", ephemeral=True)
            return

        uid = self.user.id
        if uid in user_party:
            await interaction.response.send_message("‚ö†Ô∏è ‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏π‡πà‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡∏≠‡∏∑‡πà‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏ä‡πâ Leave ‡∏Å‡πà‡∏≠‡∏ô", ephemeral=True)
            return

        members = parties[self.selected_time][self.selected_ch][self.selected_boss]
        remaining_slots = 5 - len(members)

        if remaining_slots <= 0:
            await interaction.response.send_message("‚ùå ‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡πÄ‡∏ï‡πá‡∏°‡πÅ‡∏•‡πâ‡∏ß", ephemeral=True)
            return

        if self.selected_count > remaining_slots:
            await interaction.response.send_message(
                f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {remaining_slots} ‡∏ó‡∏µ‡πà ‡πÅ‡∏ï‡πà‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å {self.selected_count} ‡∏Ñ‡∏ô",
                ephemeral=True
            )
            return

        # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
        members.extend([uid] * self.selected_count)
        user_party[uid] = (self.selected_time, self.selected_ch, self.selected_boss, self.selected_count)

        await interaction.response.send_message(
            f"‚úÖ {self.user.display_name} ‡πÄ‡∏Ç‡πâ‡∏≤‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ {self.selected_time} {self.selected_ch} {self.selected_boss} "
            f"({len(members)}/5 ‡∏Ñ‡∏ô, ‡∏•‡∏á‡πÅ‡∏ó‡∏ô {self.selected_count-1} ‡∏Ñ‡∏ô)",
            ephemeral=True
        )

    async def leave_callback(self, interaction: discord.Interaction):
        uid = self.user.id
        if uid not in user_party:
            await interaction.response.send_message("‚ö†Ô∏è ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡πÉ‡∏î‡πÜ", ephemeral=True)
            return

        time, ch, boss, count = user_party[uid]
        members = parties[time][ch][boss]
        for _ in range(count):
            if uid in members:
                members.remove(uid)

        del user_party[uid]
        await interaction.response.send_message(
            f"‚Ü©Ô∏è {self.user.display_name} ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ {time} {ch} {boss} (‡∏Ñ‡∏∑‡∏ô {count} ‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á)",
            ephemeral=True
        )

# ------------------------------
# Modal ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö delete (admin)
class DeleteModal(discord.ui.Modal, title="‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏à‡∏≤‡∏Å‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ (admin)"):
    time_select = discord.ui.TextInput(label="‡πÄ‡∏ß‡∏•‡∏≤ (‡πÄ‡∏ä‡πà‡∏ô 16.00)")
    ch_select = discord.ui.TextInput(label="Channel (CH-1 ‡∏´‡∏£‡∏∑‡∏≠ CH-2)")
    boss_select = discord.ui.TextInput(label="Boss (Sylph, Undine, Gnome, Salamander)")
    count_select = discord.ui.TextInput(label="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö", placeholder="‡πÄ‡∏ä‡πà‡∏ô 2")
    password = discord.ui.TextInput(label="Password")

    async def on_submit(self, interaction: discord.Interaction):
        if self.password.value != ADMIN_PASSWORD:
            await interaction.response.send_message("‚ùå Password ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", ephemeral=True)
            return

        t = self.time_select.value
        ch = self.ch_select.value
        boss = self.boss_select.value

        if t not in parties or ch not in parties[t] or boss not in parties[t][ch]:
            await interaction.response.send_message("‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏•‡∏≤/Channel/Boss ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", ephemeral=True)
            return

        try:
            count = int(self.count_select.value)
            if count <= 0:
                raise ValueError
        except ValueError:
            await interaction.response.send_message("‚ö†Ô∏è ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç > 0", ephemeral=True)
            return

        members = parties[t][ch][boss]
        if not members:
            await interaction.response.send_message(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ {t} {ch} {boss}", ephemeral=True)
            return

        # ‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
        deleted = []
        for _ in range(count):
            if members:
                uid = members.pop(0)
                deleted.append(uid)
                if uid in user_party:
                    del user_party[uid]

        names = [interaction.guild.get_member(uid).display_name if interaction.guild.get_member(uid) else str(uid) for uid in deleted]

        await interaction.response.send_message(
            f"üóëÔ∏è ‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏à‡∏≤‡∏Å‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ {t} {ch} {boss}: {', '.join(names)}", ephemeral=True
        )

# ------------------------------
# Slash Commands
@bot.tree.command(name="join", description="‡πÄ‡∏Ç‡πâ‡∏≤‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡πÅ‡∏ö‡∏ö UI ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡πÄ‡∏ß‡∏•‡∏≤/CH/Boss/‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô")
async def join(interaction: discord.Interaction):
    view = JoinView(interaction.user)
    await interaction.response.send_message("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡πÄ‡∏ß‡∏•‡∏≤ / Channel / Boss / ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î ‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô ‡∏´‡∏£‡∏∑‡∏≠ Leave", view=view, ephemeral=True)

@bot.tree.command(name="list", description="‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ")
@app_commands.describe(time="‡πÉ‡∏™‡πà‡πÄ‡∏ß‡∏•‡∏≤ ‡πÄ‡∏ä‡πà‡∏ô 16.00 (‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)")
async def list_party(interaction: discord.Interaction, time: str = None):
    guild = interaction.guild
    if time:
        if time not in parties:
            await interaction.response.send_message("‚ö†Ô∏è ‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", ephemeral=True)
            return
        embed = discord.Embed(title=f"üìã ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡πÄ‡∏ß‡∏•‡∏≤ {time}", color=discord.Color.blue())
        for ch in parties[time]:
            desc = ""
            for boss, members in parties[time][ch].items():
                names = [guild.get_member(uid).display_name if guild.get_member(uid) else str(uid) for uid in members]
                desc += f"**{boss}** ({len(members)}/5): {', '.join(names) if names else '-'}\n"
            embed.add_field(name=ch, value=desc, inline=False)
    else:
        embed = discord.Embed(title="üìã ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏∏‡∏Å‡πÄ‡∏ß‡∏•‡∏≤", color=discord.Color.blue())
        for t in parties:
            for ch in parties[t]:
                desc = ""
                for boss, members in parties[t][ch].items():
                    names = [guild.get_member(uid).display_name if guild.get_member(uid) else str(uid) for uid in members]
                    desc += f"**{boss}** ({len(members)}/5): {', '.join(names) if names else '-'}\n"
                embed.add_field(name=f"{t} {ch}", value=desc, inline=False)
    await interaction.response.send_message(embed=embed, ephemeral=True)

@bot.tree.command(name="clear", description="‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
async def clear(interaction: discord.Interaction):
    for t in parties:
        for ch in parties[t]:
            for boss in parties[t][ch]:
                parties[t][ch][boss] = []
    user_party.clear()
    await interaction.response.send_message("üßπ ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß", ephemeral=True)

@bot.tree.command(name="helpme", description="‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ö‡∏≠‡∏ó‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ")
async def helpme(interaction: discord.Interaction):
    msg = (
        "üìñ **‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ö‡∏≠‡∏ó‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ**\n"
        "`/join` ‚Üí ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡πÄ‡∏ß‡∏•‡∏≤ / Channel / Boss / ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô\n"
        "`/list [‡πÄ‡∏ß‡∏•‡∏≤]` ‚Üí ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ\n"
        "`/clear` ‚Üí ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î\n"
        "`/delete` ‚Üí ‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏à‡∏≤‡∏Å‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ (admin ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà password)\n"
    )
    await interaction.response.send_message(msg, ephemeral=True)

@bot.tree.command(name="settime", description="‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏° join (admin ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà password)")
@app_commands.describe(time="‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡∏°‡πà ‡πÄ‡∏ä‡πà‡∏ô 12.00")
async def settime(interaction: discord.Interaction, time: str, password: str):
    global join_time
    if password != ADMIN_PASSWORD:
        await interaction.response.send_message("‚ùå Password ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", ephemeral=True)
        return
    join_time = time
    await interaction.response.send_message(f"‚è∞ ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏° join ‡πÄ‡∏õ‡πá‡∏ô {join_time}", ephemeral=True)

@bot.tree.command(name="delete", description="‡∏•‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏à‡∏≤‡∏Å‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ (admin ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà password)")
async def delete(interaction: discord.Interaction):
    modal = DeleteModal()
    await interaction.response.send_modal(modal)

# ------------------------------
# Run bot
@bot.event
async def on_ready():
    await bot.tree.sync()
    print(f"‚úÖ Bot Online as {bot.user}")

bot.run(os.environ["DISCORD_BOT_TOKEN"])
